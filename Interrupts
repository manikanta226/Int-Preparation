1. what are interrupts ?
Ans. Interrupts are s/w and h/w events that occur when the processor is executing some other scheduled program P. This event results in a forces control transfer from the currently executing program P to a new program called the ISR.
     The program P, which was executing before the ISR took over, goes to a suspended state.

2. Importance of interrupts ( If interrupts weren't there..)
Ans. 1. External hardware devices cannot request/respond to the CPU asynchrnously.
     2. Scheduler cannot perform preemptive scheduling.
     3. Software might not be able to perform privileged operations.
     4. s/w might not be able to recover from run-time errors.
     5. operating system might not be able to perform demand paging.
     
3. Interrupts vs exceptions 
Ans. Interrupts are asynchronous events intended to shift the focus of the CPU towards a different process. It can occur before the start, during the execution or after the execution of an instrction.
        Exam: Timer interrupts, Request to service h/w device.
     Execptions occur when the processor detects an error when executing a particular instruction.
        Exam: Page faults, Protection violations.

4. Types of Interrupts 
Ans. Hardware generated : external interrupts are received through the pins of the processor chip or through the LAPIC.
        Exam: Interrupts from printer, keyboard, mouse.
      Software Generated: s/w interrupts ar egenerated by issuing thye INT i command from the executing program, where i is the interrupt vector.
         Exam: INT 64, which can invoke a custom ISR written by the user.

5. Types of Exceptions:
Ans. Fault: A recoverable exception whose ISR takes corrective action. The instruction that caused the fault is re-executed.
         Exam: Page Fault
     Trap: A recoverable exception whose ISR takes corrective action. The instruction that caused the trap is ignored, and the program execution continues from the next instruction.
          Exam: system calls
      Abort: An irrecoverable exception used to report severe errors that cannot be corrected. Program execution cannot continue after this.
           Exam: Hardware errors

6. How do we diasble interrupts ?
Ans. Non-maskable Interrupts: these cannot be disabled by the user.
     Maskable: clearing the IF flag of the EFLAGS processor register disables Maskable interrupts. We can use CLI instruction to clear, and STI intruction to set the flag.
     Special Cases: PUSHF, POPF, TAsk switching and IRET affect the EFLAGS register implicitly.
7. Interrupt descriptor table:
Ans. To support relocatable ISR's and to configure permissions.
     Table of 256 entries, one coreesponding to each interrupt. Each entry holds the descriptor that points to the ISR. This table is programmable.
     Processor register IDTR holds the address of IDT.
8. Context Switching :
Ans. The process of saving the context of one process and loading the context of another process is known as Context Switching. In simple terms, it is like loading and unloading the process from running state to ready state.

9. When does context switching happen?
Ans. 1. When a high-priority process comes to ready state (i.e. with higher priority than the running process)
     2. An Interrupt occurs
     3. User and kernel mode switch (It is not necessary though)
     4. Preemptive CPU scheduling used.

10. Context Switch vs Mode Switch
Ans. A mode switch occurs when CPU privilege level is changed, for example when a system call is made or a fault occurs. The kernel works in more a privileged mode than a standard user task. If a user process wants to access things which are only accessible to the kernel, a mode switch must occur. The currently executing process need not be changed during a mode switch.
A mode switch typically occurs for a process context switch to occur. Only the kernel can cause a context switch.

11. CPU-Bound vs I/O-Bound Processes:
Ans. A CPU-bound process requires more CPU time or spends more time in the running state.
An I/O-bound process requires more I/O time and less CPU time. An I/O-bound process spends more time in the waiting state.

12. Process Context and Interrupt Context ?
Ans: The kernel accomplishes useful work using a combination of process contexts and interrupt contexts. Kernel code that services system calls issued by user applications runs on behalf of the corresponding application processes and is said to execute in process context. Interrupt handlers, on the other hand, run asynchronously in interrupt context. Processes contexts are not tied to any interrupt context and vice versa.

Kernel code running in process context is preemptible. An interrupt context, however, always runs to completion and is not preemptible. Because of this, there are restrictions on what can be done from interrupt context.

13. 
11.
12.
